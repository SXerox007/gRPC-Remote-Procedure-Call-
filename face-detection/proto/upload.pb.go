// Code generated by protoc-gen-go. DO NOT EDIT.
// source: expert/multipart-gRPC-chunking/proto/upload.proto

package uploadpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadChunkRequest struct {
	FileChunk            []byte   `protobuf:"bytes,1,opt,name=file_chunk,json=fileChunk,proto3" json:"file_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadChunkRequest) Reset()         { *m = UploadChunkRequest{} }
func (m *UploadChunkRequest) String() string { return proto.CompactTextString(m) }
func (*UploadChunkRequest) ProtoMessage()    {}
func (*UploadChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ca9d5f26046b2e5, []int{0}
}

func (m *UploadChunkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadChunkRequest.Unmarshal(m, b)
}
func (m *UploadChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadChunkRequest.Marshal(b, m, deterministic)
}
func (m *UploadChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadChunkRequest.Merge(m, src)
}
func (m *UploadChunkRequest) XXX_Size() int {
	return xxx_messageInfo_UploadChunkRequest.Size(m)
}
func (m *UploadChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadChunkRequest proto.InternalMessageInfo

func (m *UploadChunkRequest) GetFileChunk() []byte {
	if m != nil {
		return m.FileChunk
	}
	return nil
}

type UploadResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResponse) Reset()         { *m = UploadResponse{} }
func (m *UploadResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()    {}
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ca9d5f26046b2e5, []int{1}
}

func (m *UploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResponse.Unmarshal(m, b)
}
func (m *UploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResponse.Marshal(b, m, deterministic)
}
func (m *UploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResponse.Merge(m, src)
}
func (m *UploadResponse) XXX_Size() int {
	return xxx_messageInfo_UploadResponse.Size(m)
}
func (m *UploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResponse proto.InternalMessageInfo

func (m *UploadResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*UploadChunkRequest)(nil), "uploadpb.UploadChunkRequest")
	proto.RegisterType((*UploadResponse)(nil), "uploadpb.UploadResponse")
}

func init() {
	proto.RegisterFile("expert/multipart-gRPC-chunking/proto/upload.proto", fileDescriptor_4ca9d5f26046b2e5)
}

var fileDescriptor_4ca9d5f26046b2e5 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x4b, 0x4b, 0xc5, 0x30,
	0x14, 0x84, 0x8d, 0xf8, 0xea, 0x41, 0x05, 0xb3, 0x0a, 0xa2, 0x50, 0xba, 0xea, 0xa6, 0x2d, 0xda,
	0xbd, 0x9b, 0x82, 0x5b, 0x25, 0xe2, 0x5a, 0xfb, 0x38, 0xd6, 0x60, 0xda, 0xc4, 0x3c, 0xc4, 0x9f,
	0x7f, 0x69, 0x42, 0x36, 0xf7, 0xee, 0x66, 0x26, 0x33, 0xe1, 0x3b, 0xf0, 0x80, 0xff, 0x1a, 0x8d,
	0x6b, 0x16, 0x2f, 0x9d, 0xd0, 0xbd, 0x71, 0xd5, 0xcc, 0x5f, 0xbb, 0x6a, 0xfc, 0xf6, 0xeb, 0x8f,
	0x58, 0xe7, 0x46, 0x1b, 0xe5, 0x54, 0xe3, 0xb5, 0x54, 0xfd, 0x54, 0x07, 0x43, 0x2f, 0xa2, 0xd3,
	0x43, 0xd1, 0x02, 0x7d, 0x0f, 0xba, 0xdb, 0xea, 0x1c, 0x7f, 0x3d, 0x5a, 0x47, 0xef, 0x01, 0xbe,
	0x84, 0xc4, 0x8f, 0xf0, 0x07, 0x23, 0x39, 0x29, 0x2f, 0x79, 0xb6, 0x25, 0xa1, 0x55, 0x3c, 0xc1,
	0x75, 0x1c, 0x71, 0xb4, 0x5a, 0xad, 0x16, 0x29, 0x83, 0xf3, 0x05, 0xad, 0xed, 0x67, 0x0c, 0xed,
	0x8c, 0x27, 0x4b, 0x29, 0x9c, 0x8c, 0x6a, 0x42, 0x76, 0x9c, 0x93, 0xf2, 0x94, 0x07, 0xfd, 0xf8,
	0x09, 0x57, 0x71, 0xff, 0x86, 0xe6, 0x4f, 0x8c, 0x48, 0x5f, 0xe0, 0x26, 0x06, 0xcf, 0x42, 0x62,
	0x0a, 0xef, 0xea, 0x44, 0x59, 0x1f, 0x22, 0xde, 0xb2, 0xfd, 0xd7, 0xc4, 0x52, 0x1c, 0x95, 0x64,
	0x38, 0x0b, 0x77, 0xb6, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x7e, 0x89, 0x47, 0x1c, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadServiceClient interface {
	UploadFileService(ctx context.Context, opts ...grpc.CallOption) (UploadService_UploadFileServiceClient, error)
}

type uploadServiceClient struct {
	cc *grpc.ClientConn
}

func NewUploadServiceClient(cc *grpc.ClientConn) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) UploadFileService(ctx context.Context, opts ...grpc.CallOption) (UploadService_UploadFileServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UploadService_serviceDesc.Streams[0], "/uploadpb.UploadService/UploadFileService", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadServiceUploadFileServiceClient{stream}
	return x, nil
}

type UploadService_UploadFileServiceClient interface {
	Send(*UploadChunkRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type uploadServiceUploadFileServiceClient struct {
	grpc.ClientStream
}

func (x *uploadServiceUploadFileServiceClient) Send(m *UploadChunkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadServiceUploadFileServiceClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadServiceServer is the server API for UploadService service.
type UploadServiceServer interface {
	UploadFileService(UploadService_UploadFileServiceServer) error
}

func RegisterUploadServiceServer(s *grpc.Server, srv UploadServiceServer) {
	s.RegisterService(&_UploadService_serviceDesc, srv)
}

func _UploadService_UploadFileService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadServiceServer).UploadFileService(&uploadServiceUploadFileServiceServer{stream})
}

type UploadService_UploadFileServiceServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadChunkRequest, error)
	grpc.ServerStream
}

type uploadServiceUploadFileServiceServer struct {
	grpc.ServerStream
}

func (x *uploadServiceUploadFileServiceServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadServiceUploadFileServiceServer) Recv() (*UploadChunkRequest, error) {
	m := new(UploadChunkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UploadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uploadpb.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFileService",
			Handler:       _UploadService_UploadFileService_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "expert/multipart-gRPC-chunking/proto/upload.proto",
}
