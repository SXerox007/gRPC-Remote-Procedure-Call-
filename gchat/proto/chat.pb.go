// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gchat/proto/chat.proto

package gChat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Group struct {
	GroupId              string   `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName            string   `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{0}
}

func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Group) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type TextMessage struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextMessage) Reset()         { *m = TextMessage{} }
func (m *TextMessage) String() string { return proto.CompactTextString(m) }
func (*TextMessage) ProtoMessage()    {}
func (*TextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{1}
}

func (m *TextMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextMessage.Unmarshal(m, b)
}
func (m *TextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextMessage.Marshal(b, m, deterministic)
}
func (m *TextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessage.Merge(m, src)
}
func (m *TextMessage) XXX_Size() int {
	return xxx_messageInfo_TextMessage.Size(m)
}
func (m *TextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessage proto.InternalMessageInfo

func (m *TextMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FileMessage struct {
	Message              *TextMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	FileChunk            []byte       `protobuf:"bytes,2,opt,name=file_chunk,json=fileChunk,proto3" json:"file_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FileMessage) Reset()         { *m = FileMessage{} }
func (m *FileMessage) String() string { return proto.CompactTextString(m) }
func (*FileMessage) ProtoMessage()    {}
func (*FileMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{2}
}

func (m *FileMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileMessage.Unmarshal(m, b)
}
func (m *FileMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileMessage.Marshal(b, m, deterministic)
}
func (m *FileMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileMessage.Merge(m, src)
}
func (m *FileMessage) XXX_Size() int {
	return xxx_messageInfo_FileMessage.Size(m)
}
func (m *FileMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FileMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FileMessage proto.InternalMessageInfo

func (m *FileMessage) GetMessage() *TextMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *FileMessage) GetFileChunk() []byte {
	if m != nil {
		return m.FileChunk
	}
	return nil
}

type CommonResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResponse) Reset()         { *m = CommonResponse{} }
func (m *CommonResponse) String() string { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()    {}
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{3}
}

func (m *CommonResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonResponse.Unmarshal(m, b)
}
func (m *CommonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonResponse.Marshal(b, m, deterministic)
}
func (m *CommonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResponse.Merge(m, src)
}
func (m *CommonResponse) XXX_Size() int {
	return xxx_messageInfo_CommonResponse.Size(m)
}
func (m *CommonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResponse proto.InternalMessageInfo

func (m *CommonResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommonResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type CreateGroup struct {
	GroupName            string   `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	IsPublic             bool     `protobuf:"varint,2,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateGroup) Reset()         { *m = CreateGroup{} }
func (m *CreateGroup) String() string { return proto.CompactTextString(m) }
func (*CreateGroup) ProtoMessage()    {}
func (*CreateGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{4}
}

func (m *CreateGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateGroup.Unmarshal(m, b)
}
func (m *CreateGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateGroup.Marshal(b, m, deterministic)
}
func (m *CreateGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGroup.Merge(m, src)
}
func (m *CreateGroup) XXX_Size() int {
	return xxx_messageInfo_CreateGroup.Size(m)
}
func (m *CreateGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGroup proto.InternalMessageInfo

func (m *CreateGroup) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CreateGroup) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

type GroupInfo struct {
	Client               string   `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	GroupName            string   `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{5}
}

func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupInfo.Unmarshal(m, b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return xxx_messageInfo_GroupInfo.Size(m)
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

func (m *GroupInfo) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *GroupInfo) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type GroupList struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupList) Reset()         { *m = GroupList{} }
func (m *GroupList) String() string { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()    {}
func (*GroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{6}
}

func (m *GroupList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupList.Unmarshal(m, b)
}
func (m *GroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupList.Marshal(b, m, deterministic)
}
func (m *GroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupList.Merge(m, src)
}
func (m *GroupList) XXX_Size() int {
	return xxx_messageInfo_GroupList.Size(m)
}
func (m *GroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupList proto.InternalMessageInfo

func (m *GroupList) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type User struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{7}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type UserList struct {
	Users                []*User  `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{8}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type CommonRequest struct {
	AccessToken          string   `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonRequest) Reset()         { *m = CommonRequest{} }
func (m *CommonRequest) String() string { return proto.CompactTextString(m) }
func (*CommonRequest) ProtoMessage()    {}
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{9}
}

func (m *CommonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonRequest.Unmarshal(m, b)
}
func (m *CommonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonRequest.Marshal(b, m, deterministic)
}
func (m *CommonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRequest.Merge(m, src)
}
func (m *CommonRequest) XXX_Size() int {
	return xxx_messageInfo_CommonRequest.Size(m)
}
func (m *CommonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRequest proto.InternalMessageInfo

func (m *CommonRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type ChatMessage struct {
	Senderid string `protobuf:"bytes,1,opt,name=senderid,proto3" json:"senderid,omitempty"`
	// Types that are valid to be assigned to MessageUser:
	//	*ChatMessage_Message
	//	*ChatMessage_FileMessage
	MessageUser    isChatMessage_MessageUser `protobuf_oneof:"message_user"`
	SenderName     string                    `protobuf:"bytes,4,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	IsGroupMessage bool                      `protobuf:"varint,5,opt,name=isGroupMessage,proto3" json:"isGroupMessage,omitempty"`
	// Types that are valid to be assigned to MessageGroup:
	//	*ChatMessage_SingleMessage
	//	*ChatMessage_Group
	MessageGroup         isChatMessage_MessageGroup `protobuf_oneof:"message_group"`
	CreationTime         *timestamp.Timestamp       `protobuf:"bytes,8,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	DeliveryTime         *timestamp.Timestamp       `protobuf:"bytes,9,opt,name=delivery_time,json=deliveryTime,proto3" json:"delivery_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc03e0a60c13019, []int{10}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetSenderid() string {
	if m != nil {
		return m.Senderid
	}
	return ""
}

type isChatMessage_MessageUser interface {
	isChatMessage_MessageUser()
}

type ChatMessage_Message struct {
	Message *TextMessage `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

type ChatMessage_FileMessage struct {
	FileMessage *FileMessage `protobuf:"bytes,3,opt,name=file_message,json=fileMessage,proto3,oneof"`
}

func (*ChatMessage_Message) isChatMessage_MessageUser() {}

func (*ChatMessage_FileMessage) isChatMessage_MessageUser() {}

func (m *ChatMessage) GetMessageUser() isChatMessage_MessageUser {
	if m != nil {
		return m.MessageUser
	}
	return nil
}

func (m *ChatMessage) GetMessage() *TextMessage {
	if x, ok := m.GetMessageUser().(*ChatMessage_Message); ok {
		return x.Message
	}
	return nil
}

func (m *ChatMessage) GetFileMessage() *FileMessage {
	if x, ok := m.GetMessageUser().(*ChatMessage_FileMessage); ok {
		return x.FileMessage
	}
	return nil
}

func (m *ChatMessage) GetSenderName() string {
	if m != nil {
		return m.SenderName
	}
	return ""
}

func (m *ChatMessage) GetIsGroupMessage() bool {
	if m != nil {
		return m.IsGroupMessage
	}
	return false
}

type isChatMessage_MessageGroup interface {
	isChatMessage_MessageGroup()
}

type ChatMessage_SingleMessage struct {
	SingleMessage string `protobuf:"bytes,6,opt,name=single_message,json=singleMessage,proto3,oneof"`
}

type ChatMessage_Group struct {
	Group *Group `protobuf:"bytes,7,opt,name=group,proto3,oneof"`
}

func (*ChatMessage_SingleMessage) isChatMessage_MessageGroup() {}

func (*ChatMessage_Group) isChatMessage_MessageGroup() {}

func (m *ChatMessage) GetMessageGroup() isChatMessage_MessageGroup {
	if m != nil {
		return m.MessageGroup
	}
	return nil
}

func (m *ChatMessage) GetSingleMessage() string {
	if x, ok := m.GetMessageGroup().(*ChatMessage_SingleMessage); ok {
		return x.SingleMessage
	}
	return ""
}

func (m *ChatMessage) GetGroup() *Group {
	if x, ok := m.GetMessageGroup().(*ChatMessage_Group); ok {
		return x.Group
	}
	return nil
}

func (m *ChatMessage) GetCreationTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *ChatMessage) GetDeliveryTime() *timestamp.Timestamp {
	if m != nil {
		return m.DeliveryTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChatMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChatMessage_OneofMarshaler, _ChatMessage_OneofUnmarshaler, _ChatMessage_OneofSizer, []interface{}{
		(*ChatMessage_Message)(nil),
		(*ChatMessage_FileMessage)(nil),
		(*ChatMessage_SingleMessage)(nil),
		(*ChatMessage_Group)(nil),
	}
}

func _ChatMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChatMessage)
	// message_user
	switch x := m.MessageUser.(type) {
	case *ChatMessage_Message:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *ChatMessage_FileMessage:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChatMessage.MessageUser has unexpected type %T", x)
	}
	// message_group
	switch x := m.MessageGroup.(type) {
	case *ChatMessage_SingleMessage:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.SingleMessage)
	case *ChatMessage_Group:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Group); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChatMessage.MessageGroup has unexpected type %T", x)
	}
	return nil
}

func _ChatMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChatMessage)
	switch tag {
	case 2: // message_user.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextMessage)
		err := b.DecodeMessage(msg)
		m.MessageUser = &ChatMessage_Message{msg}
		return true, err
	case 3: // message_user.file_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileMessage)
		err := b.DecodeMessage(msg)
		m.MessageUser = &ChatMessage_FileMessage{msg}
		return true, err
	case 6: // message_group.single_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MessageGroup = &ChatMessage_SingleMessage{x}
		return true, err
	case 7: // message_group.group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Group)
		err := b.DecodeMessage(msg)
		m.MessageGroup = &ChatMessage_Group{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChatMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChatMessage)
	// message_user
	switch x := m.MessageUser.(type) {
	case *ChatMessage_Message:
		s := proto.Size(x.Message)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChatMessage_FileMessage:
		s := proto.Size(x.FileMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// message_group
	switch x := m.MessageGroup.(type) {
	case *ChatMessage_SingleMessage:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.SingleMessage)))
		n += len(x.SingleMessage)
	case *ChatMessage_Group:
		s := proto.Size(x.Group)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Group)(nil), "gChat.Group")
	proto.RegisterType((*TextMessage)(nil), "gChat.TextMessage")
	proto.RegisterType((*FileMessage)(nil), "gChat.FileMessage")
	proto.RegisterType((*CommonResponse)(nil), "gChat.CommonResponse")
	proto.RegisterType((*CreateGroup)(nil), "gChat.CreateGroup")
	proto.RegisterType((*GroupInfo)(nil), "gChat.GroupInfo")
	proto.RegisterType((*GroupList)(nil), "gChat.GroupList")
	proto.RegisterType((*User)(nil), "gChat.User")
	proto.RegisterType((*UserList)(nil), "gChat.UserList")
	proto.RegisterType((*CommonRequest)(nil), "gChat.CommonRequest")
	proto.RegisterType((*ChatMessage)(nil), "gChat.ChatMessage")
}

func init() { proto.RegisterFile("gchat/proto/chat.proto", fileDescriptor_cbc03e0a60c13019) }

var fileDescriptor_cbc03e0a60c13019 = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdf, 0x4f, 0xd4, 0x4e,
	0x10, 0xa7, 0xdc, 0xaf, 0xde, 0xb4, 0x77, 0x90, 0xcd, 0xf7, 0x8b, 0xb5, 0x6a, 0xc0, 0x86, 0x08,
	0x0f, 0x5a, 0xe0, 0x8c, 0x1a, 0x13, 0xa3, 0x81, 0x4b, 0xe4, 0x30, 0x68, 0x4c, 0x83, 0x2f, 0xbe,
	0x5c, 0x4a, 0x6f, 0xaf, 0x6c, 0xb8, 0x76, 0xcf, 0x6e, 0x8f, 0xe8, 0x9b, 0xff, 0xa0, 0xff, 0x93,
	0xd9, 0xd9, 0xee, 0xb5, 0x05, 0x41, 0xdf, 0x76, 0x3e, 0x33, 0xf3, 0x99, 0xd9, 0xf9, 0xcc, 0xc0,
	0x46, 0x1c, 0x5d, 0x84, 0xf9, 0xde, 0x3c, 0xe3, 0x39, 0xdf, 0x93, 0x4f, 0x1f, 0x9f, 0xa4, 0x15,
	0x0f, 0x2f, 0xc2, 0xdc, 0xdd, 0x8c, 0x39, 0x8f, 0x67, 0x54, 0xf9, 0xcf, 0x17, 0xd3, 0xbd, 0x9c,
	0x25, 0x54, 0xe4, 0x61, 0x32, 0x57, 0x71, 0xde, 0x21, 0xb4, 0x8e, 0x33, 0xbe, 0x98, 0x93, 0xfb,
	0x60, 0xc6, 0xf2, 0x31, 0x66, 0x13, 0xc7, 0xd8, 0x32, 0x76, 0xbb, 0x41, 0x07, 0xed, 0x93, 0x09,
	0x79, 0x04, 0xa0, 0x5c, 0x69, 0x98, 0x50, 0x67, 0x15, 0x9d, 0x5d, 0x44, 0x3e, 0x85, 0x09, 0xf5,
	0x76, 0xc0, 0x3a, 0xa3, 0xdf, 0xf3, 0x8f, 0x54, 0x88, 0x30, 0xa6, 0xc4, 0x81, 0x4e, 0xa2, 0x9e,
	0x9a, 0xa7, 0x30, 0xbd, 0xaf, 0x60, 0xbd, 0x67, 0x33, 0xaa, 0x03, 0x9f, 0xd6, 0x03, 0xad, 0x01,
	0xf1, 0xb1, 0x69, 0xbf, 0xc2, 0xb6, 0x4c, 0x96, 0x4d, 0x4c, 0xd9, 0x8c, 0x8e, 0xa3, 0x8b, 0x45,
	0x7a, 0x89, 0x4d, 0xd8, 0x41, 0x57, 0x22, 0x43, 0x09, 0x78, 0x6f, 0xa1, 0x3f, 0xe4, 0x49, 0xc2,
	0xd3, 0x80, 0x8a, 0x39, 0x4f, 0xc5, 0x1d, 0x7d, 0x10, 0x02, 0xcd, 0x88, 0x4f, 0xd4, 0x4f, 0x5a,
	0x01, 0xbe, 0xbd, 0x11, 0x58, 0xc3, 0x8c, 0x86, 0x39, 0x55, 0xd3, 0xa8, 0x7f, 0xd9, 0xb8, 0xf6,
	0x65, 0xe2, 0x82, 0xc9, 0xc4, 0xe7, 0xc5, 0xf9, 0x8c, 0x45, 0xc8, 0x62, 0x06, 0x4b, 0xdb, 0x3b,
	0x84, 0x2e, 0x72, 0x9c, 0xa4, 0x53, 0x4e, 0x36, 0xa0, 0x1d, 0xcd, 0x18, 0x4d, 0xf3, 0x82, 0xa3,
	0xb0, 0xc8, 0x43, 0x28, 0xd9, 0x6e, 0x4e, 0xf4, 0xa0, 0xa0, 0x38, 0x65, 0x22, 0x27, 0xdb, 0xd0,
	0x46, 0x8f, 0x70, 0x8c, 0xad, 0xc6, 0xae, 0x35, 0xb0, 0x8b, 0x29, 0x61, 0x44, 0x50, 0xf8, 0xbc,
	0x37, 0xd0, 0xfc, 0x22, 0x68, 0x46, 0xee, 0x41, 0x67, 0x21, 0x68, 0x56, 0xaa, 0xd8, 0x96, 0xe6,
	0xc9, 0x84, 0x3c, 0x80, 0x2e, 0x3a, 0x2a, 0x1a, 0x9a, 0x12, 0xc0, 0x82, 0xcf, 0xc0, 0x94, 0xd9,
	0x58, 0xef, 0x31, 0xb4, 0x24, 0x2e, 0x9c, 0x55, 0x2c, 0x67, 0x15, 0xe5, 0xa4, 0x3f, 0x50, 0x1e,
	0x6f, 0x00, 0x3d, 0x3d, 0xec, 0x6f, 0x0b, 0x8a, 0x39, 0x76, 0x18, 0x45, 0x54, 0x88, 0x71, 0xce,
	0x2f, 0x69, 0x5a, 0x94, 0xb6, 0x14, 0x76, 0x26, 0x21, 0xef, 0x57, 0x03, 0x2c, 0x49, 0xa4, 0xd5,
	0x77, 0xc1, 0x14, 0x34, 0x9d, 0xd0, 0x6c, 0xd9, 0xe9, 0xd2, 0x26, 0x7e, 0x29, 0xdd, 0xea, 0x6d,
	0x9b, 0x31, 0x5a, 0x29, 0x05, 0x7d, 0x05, 0x36, 0xee, 0x86, 0x4e, 0x6a, 0xd4, 0x92, 0x2a, 0x3b,
	0x37, 0x5a, 0x09, 0xac, 0x69, 0x65, 0x05, 0x37, 0xc1, 0x52, 0x45, 0xd5, 0x58, 0x9a, 0xd8, 0x07,
	0x28, 0x08, 0x85, 0x7e, 0x02, 0x7d, 0x26, 0x70, 0xd2, 0x45, 0x8a, 0xd3, 0x42, 0xb9, 0xaf, 0xa1,
	0x64, 0x07, 0xfa, 0x82, 0xa5, 0x71, 0xa5, 0x87, 0xb6, 0xe4, 0x1a, 0x19, 0x41, 0x4f, 0xe1, 0x3a,
	0x70, 0x1b, 0x5a, 0xa8, 0x98, 0xd3, 0xc1, 0x1e, 0x6b, 0x62, 0x8e, 0x8c, 0x40, 0x39, 0xc9, 0x3b,
	0xe8, 0x45, 0x72, 0x1b, 0x19, 0x4f, 0xc7, 0xf2, 0x62, 0x1d, 0x13, 0xa3, 0x5d, 0x5f, 0x9d, 0xb3,
	0xaf, 0xcf, 0xd9, 0x3f, 0xd3, 0xe7, 0x1c, 0xd8, 0x3a, 0x41, 0x42, 0x92, 0x60, 0x42, 0x67, 0xec,
	0x8a, 0x66, 0x3f, 0x14, 0x41, 0xf7, 0xef, 0x04, 0x3a, 0x41, 0x42, 0x47, 0x7d, 0xb0, 0x8b, 0x9f,
	0x8c, 0xa5, 0xe6, 0x47, 0x6b, 0xd0, 0xd3, 0x36, 0xb6, 0x38, 0xf8, 0xd9, 0x00, 0x53, 0xb6, 0x1e,
	0x70, 0x9e, 0x90, 0x01, 0x34, 0xe5, 0x9b, 0xe8, 0x91, 0x57, 0x84, 0x76, 0xff, 0x80, 0xed, 0x1a,
	0xfb, 0x06, 0x79, 0x0d, 0x76, 0xe5, 0xe2, 0x44, 0x99, 0x5b, 0x82, 0xee, 0xff, 0x1a, 0xab, 0x9f,
	0xf6, 0x3e, 0x74, 0x3f, 0x70, 0x96, 0xaa, 0x53, 0xad, 0x8d, 0xf0, 0xb6, 0x8c, 0x97, 0x60, 0x1f,
	0xd3, 0xbc, 0x3c, 0xaa, 0xff, 0xae, 0x85, 0xe1, 0x1a, 0xbb, 0xeb, 0x55, 0x2a, 0x8c, 0x3b, 0x80,
	0x75, 0x9d, 0xb7, 0x3c, 0x90, 0x7a, 0xc1, 0xb5, 0xca, 0x7d, 0xa0, 0xfb, 0x05, 0x96, 0x92, 0xa6,
	0xb8, 0xa3, 0xd4, 0x8d, 0xb4, 0x03, 0x80, 0x53, 0x1a, 0x5e, 0xd1, 0x7f, 0xff, 0xd4, 0x79, 0x1b,
	0x55, 0x7c, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xd4, 0x71, 0x7d, 0x04, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatRoomClient is the client API for ChatRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatRoomClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRoom_ChatClient, error)
	CreateGroups(ctx context.Context, in *CreateGroup, opts ...grpc.CallOption) (*CommonResponse, error)
	JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CommonResponse, error)
	GetGroupList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GroupList, error)
	GetGroupUserList(ctx context.Context, in *Group, opts ...grpc.CallOption) (*UserList, error)
	GetUsersList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*UserList, error)
	LeaveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CommonResponse, error)
}

type chatRoomClient struct {
	cc *grpc.ClientConn
}

func NewChatRoomClient(cc *grpc.ClientConn) ChatRoomClient {
	return &chatRoomClient{cc}
}

func (c *chatRoomClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRoom_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatRoom_serviceDesc.Streams[0], "/gChat.ChatRoom/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRoomChatClient{stream}
	return x, nil
}

type ChatRoom_ChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatRoomChatClient struct {
	grpc.ClientStream
}

func (x *chatRoomChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRoomChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatRoomClient) CreateGroups(ctx context.Context, in *CreateGroup, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/gChat.ChatRoom/CreateGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/gChat.ChatRoom/JoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetGroupList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := c.cc.Invoke(ctx, "/gChat.ChatRoom/GetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetGroupUserList(ctx context.Context, in *Group, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/gChat.ChatRoom/GetGroupUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetUsersList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/gChat.ChatRoom/GetUsersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) LeaveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/gChat.ChatRoom/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoomServer is the server API for ChatRoom service.
type ChatRoomServer interface {
	Chat(ChatRoom_ChatServer) error
	CreateGroups(context.Context, *CreateGroup) (*CommonResponse, error)
	JoinGroup(context.Context, *Group) (*CommonResponse, error)
	GetGroupList(context.Context, *CommonRequest) (*GroupList, error)
	GetGroupUserList(context.Context, *Group) (*UserList, error)
	GetUsersList(context.Context, *CommonRequest) (*UserList, error)
	LeaveGroup(context.Context, *Group) (*CommonResponse, error)
}

func RegisterChatRoomServer(s *grpc.Server, srv ChatRoomServer) {
	s.RegisterService(&_ChatRoom_serviceDesc, srv)
}

func _ChatRoom_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatRoomServer).Chat(&chatRoomChatServer{stream})
}

type ChatRoom_ChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatRoomChatServer struct {
	grpc.ServerStream
}

func (x *chatRoomChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRoomChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatRoom_CreateGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).CreateGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gChat.ChatRoom/CreateGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).CreateGroups(ctx, req.(*CreateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gChat.ChatRoom/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).JoinGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gChat.ChatRoom/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetGroupList(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetGroupUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetGroupUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gChat.ChatRoom/GetGroupUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetGroupUserList(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gChat.ChatRoom/GetUsersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetUsersList(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gChat.ChatRoom/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).LeaveGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatRoom_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gChat.ChatRoom",
	HandlerType: (*ChatRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroups",
			Handler:    _ChatRoom_CreateGroups_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _ChatRoom_JoinGroup_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _ChatRoom_GetGroupList_Handler,
		},
		{
			MethodName: "GetGroupUserList",
			Handler:    _ChatRoom_GetGroupUserList_Handler,
		},
		{
			MethodName: "GetUsersList",
			Handler:    _ChatRoom_GetUsersList_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _ChatRoom_LeaveGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatRoom_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gchat/proto/chat.proto",
}
