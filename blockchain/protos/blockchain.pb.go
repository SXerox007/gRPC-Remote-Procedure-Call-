// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain/protos/blockchain.proto

package blockchain

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonBlockResponse struct {
	HashValue            string   `protobuf:"bytes,1,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
	PrevHashValue        string   `protobuf:"bytes,2,opt,name=prevHashValue,proto3" json:"prevHashValue,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonBlockResponse) Reset()         { *m = CommonBlockResponse{} }
func (m *CommonBlockResponse) String() string { return proto.CompactTextString(m) }
func (*CommonBlockResponse) ProtoMessage()    {}
func (*CommonBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4cd7429c9bf9dd8, []int{0}
}

func (m *CommonBlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonBlockResponse.Unmarshal(m, b)
}
func (m *CommonBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonBlockResponse.Marshal(b, m, deterministic)
}
func (m *CommonBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonBlockResponse.Merge(m, src)
}
func (m *CommonBlockResponse) XXX_Size() int {
	return xxx_messageInfo_CommonBlockResponse.Size(m)
}
func (m *CommonBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommonBlockResponse proto.InternalMessageInfo

func (m *CommonBlockResponse) GetHashValue() string {
	if m != nil {
		return m.HashValue
	}
	return ""
}

func (m *CommonBlockResponse) GetPrevHashValue() string {
	if m != nil {
		return m.PrevHashValue
	}
	return ""
}

func (m *CommonBlockResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type CommonRequest struct {
	IsFetchAllBlocks     bool     `protobuf:"varint,1,opt,name=isFetchAllBlocks,proto3" json:"isFetchAllBlocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonRequest) Reset()         { *m = CommonRequest{} }
func (m *CommonRequest) String() string { return proto.CompactTextString(m) }
func (*CommonRequest) ProtoMessage()    {}
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4cd7429c9bf9dd8, []int{1}
}

func (m *CommonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonRequest.Unmarshal(m, b)
}
func (m *CommonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonRequest.Marshal(b, m, deterministic)
}
func (m *CommonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRequest.Merge(m, src)
}
func (m *CommonRequest) XXX_Size() int {
	return xxx_messageInfo_CommonRequest.Size(m)
}
func (m *CommonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRequest proto.InternalMessageInfo

func (m *CommonRequest) GetIsFetchAllBlocks() bool {
	if m != nil {
		return m.IsFetchAllBlocks
	}
	return false
}

type AddBlockChainRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddBlockChainRequest) Reset()         { *m = AddBlockChainRequest{} }
func (m *AddBlockChainRequest) String() string { return proto.CompactTextString(m) }
func (*AddBlockChainRequest) ProtoMessage()    {}
func (*AddBlockChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4cd7429c9bf9dd8, []int{2}
}

func (m *AddBlockChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddBlockChainRequest.Unmarshal(m, b)
}
func (m *AddBlockChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddBlockChainRequest.Marshal(b, m, deterministic)
}
func (m *AddBlockChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBlockChainRequest.Merge(m, src)
}
func (m *AddBlockChainRequest) XXX_Size() int {
	return xxx_messageInfo_AddBlockChainRequest.Size(m)
}
func (m *AddBlockChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBlockChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddBlockChainRequest proto.InternalMessageInfo

func (m *AddBlockChainRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type AddBlockChainResponse struct {
	HashValue            string   `protobuf:"bytes,1,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddBlockChainResponse) Reset()         { *m = AddBlockChainResponse{} }
func (m *AddBlockChainResponse) String() string { return proto.CompactTextString(m) }
func (*AddBlockChainResponse) ProtoMessage()    {}
func (*AddBlockChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4cd7429c9bf9dd8, []int{3}
}

func (m *AddBlockChainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddBlockChainResponse.Unmarshal(m, b)
}
func (m *AddBlockChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddBlockChainResponse.Marshal(b, m, deterministic)
}
func (m *AddBlockChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBlockChainResponse.Merge(m, src)
}
func (m *AddBlockChainResponse) XXX_Size() int {
	return xxx_messageInfo_AddBlockChainResponse.Size(m)
}
func (m *AddBlockChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBlockChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddBlockChainResponse proto.InternalMessageInfo

func (m *AddBlockChainResponse) GetHashValue() string {
	if m != nil {
		return m.HashValue
	}
	return ""
}

type GetBlockChainRequest struct {
	CommonRequest        *CommonRequest `protobuf:"bytes,1,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetBlockChainRequest) Reset()         { *m = GetBlockChainRequest{} }
func (m *GetBlockChainRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockChainRequest) ProtoMessage()    {}
func (*GetBlockChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4cd7429c9bf9dd8, []int{4}
}

func (m *GetBlockChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBlockChainRequest.Unmarshal(m, b)
}
func (m *GetBlockChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBlockChainRequest.Marshal(b, m, deterministic)
}
func (m *GetBlockChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockChainRequest.Merge(m, src)
}
func (m *GetBlockChainRequest) XXX_Size() int {
	return xxx_messageInfo_GetBlockChainRequest.Size(m)
}
func (m *GetBlockChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockChainRequest proto.InternalMessageInfo

func (m *GetBlockChainRequest) GetCommonRequest() *CommonRequest {
	if m != nil {
		return m.CommonRequest
	}
	return nil
}

type GetBlockChainResponse struct {
	CommonResponse       []*CommonBlockResponse `protobuf:"bytes,1,rep,name=commonResponse,proto3" json:"commonResponse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetBlockChainResponse) Reset()         { *m = GetBlockChainResponse{} }
func (m *GetBlockChainResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockChainResponse) ProtoMessage()    {}
func (*GetBlockChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4cd7429c9bf9dd8, []int{5}
}

func (m *GetBlockChainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBlockChainResponse.Unmarshal(m, b)
}
func (m *GetBlockChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBlockChainResponse.Marshal(b, m, deterministic)
}
func (m *GetBlockChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockChainResponse.Merge(m, src)
}
func (m *GetBlockChainResponse) XXX_Size() int {
	return xxx_messageInfo_GetBlockChainResponse.Size(m)
}
func (m *GetBlockChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockChainResponse proto.InternalMessageInfo

func (m *GetBlockChainResponse) GetCommonResponse() []*CommonBlockResponse {
	if m != nil {
		return m.CommonResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*CommonBlockResponse)(nil), "CommonBlockResponse")
	proto.RegisterType((*CommonRequest)(nil), "CommonRequest")
	proto.RegisterType((*AddBlockChainRequest)(nil), "AddBlockChainRequest")
	proto.RegisterType((*AddBlockChainResponse)(nil), "AddBlockChainResponse")
	proto.RegisterType((*GetBlockChainRequest)(nil), "GetBlockChainRequest")
	proto.RegisterType((*GetBlockChainResponse)(nil), "GetBlockChainResponse")
}

func init() { proto.RegisterFile("blockchain/protos/blockchain.proto", fileDescriptor_d4cd7429c9bf9dd8) }

var fileDescriptor_d4cd7429c9bf9dd8 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xa6, 0x4e, 0xc4, 0xbd, 0xd1, 0xa1, 0xb1, 0x1d, 0x65, 0x78, 0x18, 0xc1, 0xc3, 0xd8, 0x21,
	0x83, 0xaa, 0x27, 0x45, 0xd8, 0x26, 0xea, 0xc1, 0x53, 0x40, 0xef, 0x59, 0x1b, 0xe8, 0xb0, 0x6d,
	0xea, 0x92, 0xf9, 0x77, 0xf8, 0x27, 0xcb, 0xde, 0xac, 0x5d, 0xba, 0x1c, 0xbc, 0xb5, 0xdf, 0xfb,
	0xf2, 0xbe, 0x1f, 0x09, 0xd0, 0x65, 0xae, 0x92, 0x8f, 0x24, 0x13, 0xab, 0x72, 0x5a, 0xad, 0x95,
	0x51, 0x7a, 0xda, 0x20, 0x0c, 0x11, 0x5a, 0xc0, 0xc5, 0x42, 0x15, 0x85, 0x2a, 0xe7, 0xdb, 0x09,
	0x97, 0xba, 0x52, 0xa5, 0x96, 0xe4, 0x12, 0xba, 0x99, 0xd0, 0xd9, 0xbb, 0xc8, 0x37, 0x32, 0xf2,
	0x46, 0xde, 0xb8, 0xcb, 0x1b, 0x80, 0x5c, 0x81, 0x5f, 0xad, 0xe5, 0xd7, 0xcb, 0x1f, 0xe3, 0x08,
	0x19, 0x36, 0x48, 0x08, 0x1c, 0xa7, 0xc2, 0x88, 0xa8, 0x83, 0x43, 0xfc, 0xa6, 0x77, 0xe0, 0xef,
	0xe4, 0xb8, 0xfc, 0xdc, 0x48, 0x6d, 0xc8, 0x04, 0xce, 0x56, 0xfa, 0x49, 0x9a, 0x24, 0x9b, 0xe5,
	0x39, 0x7a, 0xd0, 0xa8, 0x77, 0xca, 0x0f, 0x70, 0x3a, 0x81, 0x60, 0x96, 0xa6, 0xf8, 0xb3, 0xd8,
	0x46, 0xa8, 0x77, 0xd4, 0x42, 0xde, 0x9e, 0xd0, 0x2d, 0x84, 0x2d, 0xee, 0x7f, 0x92, 0xd1, 0x57,
	0x08, 0x9e, 0xa5, 0x39, 0x94, 0xb8, 0x01, 0x3f, 0xd9, 0xf7, 0x8d, 0x27, 0x7b, 0x71, 0x9f, 0x59,
	0x69, 0xb8, 0x4d, 0xa2, 0x6f, 0x10, 0xb6, 0xb6, 0xfd, 0x9a, 0xb8, 0x87, 0x7e, 0xcd, 0xdc, 0x21,
	0x91, 0x37, 0xea, 0x8c, 0x7b, 0x71, 0xc0, 0x1c, 0x97, 0xc1, 0x5b, 0xdc, 0xf8, 0xdb, 0x03, 0x68,
	0x96, 0x92, 0x07, 0xf0, 0xad, 0xa8, 0x24, 0x64, 0xae, 0x9a, 0x86, 0x03, 0xe6, 0x6e, 0x64, 0x0e,
	0xe7, 0x96, 0xcb, 0x47, 0x61, 0x04, 0x09, 0x99, 0xab, 0x87, 0xe1, 0x80, 0x39, 0x03, 0x2d, 0x4f,
	0xf0, 0x35, 0x5d, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xda, 0x6e, 0x8f, 0x73, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockChainClient is the client API for BlockChain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockChainClient interface {
	AddBlockChain(ctx context.Context, in *AddBlockChainRequest, opts ...grpc.CallOption) (*AddBlockChainResponse, error)
	GetBlockChainData(ctx context.Context, in *GetBlockChainRequest, opts ...grpc.CallOption) (*GetBlockChainResponse, error)
}

type blockChainClient struct {
	cc *grpc.ClientConn
}

func NewBlockChainClient(cc *grpc.ClientConn) BlockChainClient {
	return &blockChainClient{cc}
}

func (c *blockChainClient) AddBlockChain(ctx context.Context, in *AddBlockChainRequest, opts ...grpc.CallOption) (*AddBlockChainResponse, error) {
	out := new(AddBlockChainResponse)
	err := c.cc.Invoke(ctx, "/BlockChain/AddBlockChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainClient) GetBlockChainData(ctx context.Context, in *GetBlockChainRequest, opts ...grpc.CallOption) (*GetBlockChainResponse, error) {
	out := new(GetBlockChainResponse)
	err := c.cc.Invoke(ctx, "/BlockChain/GetBlockChainData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockChainServer is the server API for BlockChain service.
type BlockChainServer interface {
	AddBlockChain(context.Context, *AddBlockChainRequest) (*AddBlockChainResponse, error)
	GetBlockChainData(context.Context, *GetBlockChainRequest) (*GetBlockChainResponse, error)
}

func RegisterBlockChainServer(s *grpc.Server, srv BlockChainServer) {
	s.RegisterService(&_BlockChain_serviceDesc, srv)
}

func _BlockChain_AddBlockChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlockChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).AddBlockChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockChain/AddBlockChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).AddBlockChain(ctx, req.(*AddBlockChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChain_GetBlockChainData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).GetBlockChainData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockChain/GetBlockChainData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).GetBlockChainData(ctx, req.(*GetBlockChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockChain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BlockChain",
	HandlerType: (*BlockChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBlockChain",
			Handler:    _BlockChain_AddBlockChain_Handler,
		},
		{
			MethodName: "GetBlockChainData",
			Handler:    _BlockChain_GetBlockChainData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain/protos/blockchain.proto",
}
