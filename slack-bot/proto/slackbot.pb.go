// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slack-bot/proto/slackbot.proto

package slackbot

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResponse) Reset()         { *m = CommonResponse{} }
func (m *CommonResponse) String() string { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()    {}
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256925389507cd0d, []int{0}
}

func (m *CommonResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonResponse.Unmarshal(m, b)
}
func (m *CommonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonResponse.Marshal(b, m, deterministic)
}
func (m *CommonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResponse.Merge(m, src)
}
func (m *CommonResponse) XXX_Size() int {
	return xxx_messageInfo_CommonResponse.Size(m)
}
func (m *CommonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResponse proto.InternalMessageInfo

func (m *CommonResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CommonResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SlackDumpRequest struct {
	QuestionFromUser     string   `protobuf:"bytes,1,opt,name=question_from_user,json=questionFromUser,proto3" json:"question_from_user,omitempty"`
	AnswerFromAi         string   `protobuf:"bytes,2,opt,name=answer_from_ai,json=answerFromAi,proto3" json:"answer_from_ai,omitempty"`
	MongodbEnable        bool     `protobuf:"varint,3,opt,name=mongodb_enable,json=mongodbEnable,proto3" json:"mongodb_enable,omitempty"`
	PostgresEnable       bool     `protobuf:"varint,4,opt,name=postgres_enable,json=postgresEnable,proto3" json:"postgres_enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlackDumpRequest) Reset()         { *m = SlackDumpRequest{} }
func (m *SlackDumpRequest) String() string { return proto.CompactTextString(m) }
func (*SlackDumpRequest) ProtoMessage()    {}
func (*SlackDumpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_256925389507cd0d, []int{1}
}

func (m *SlackDumpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlackDumpRequest.Unmarshal(m, b)
}
func (m *SlackDumpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlackDumpRequest.Marshal(b, m, deterministic)
}
func (m *SlackDumpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlackDumpRequest.Merge(m, src)
}
func (m *SlackDumpRequest) XXX_Size() int {
	return xxx_messageInfo_SlackDumpRequest.Size(m)
}
func (m *SlackDumpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SlackDumpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SlackDumpRequest proto.InternalMessageInfo

func (m *SlackDumpRequest) GetQuestionFromUser() string {
	if m != nil {
		return m.QuestionFromUser
	}
	return ""
}

func (m *SlackDumpRequest) GetAnswerFromAi() string {
	if m != nil {
		return m.AnswerFromAi
	}
	return ""
}

func (m *SlackDumpRequest) GetMongodbEnable() bool {
	if m != nil {
		return m.MongodbEnable
	}
	return false
}

func (m *SlackDumpRequest) GetPostgresEnable() bool {
	if m != nil {
		return m.PostgresEnable
	}
	return false
}

type SlackDumpResponse struct {
	CommonResponse       *CommonResponse `protobuf:"bytes,1,opt,name=CommonResponse,proto3" json:"CommonResponse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SlackDumpResponse) Reset()         { *m = SlackDumpResponse{} }
func (m *SlackDumpResponse) String() string { return proto.CompactTextString(m) }
func (*SlackDumpResponse) ProtoMessage()    {}
func (*SlackDumpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_256925389507cd0d, []int{2}
}

func (m *SlackDumpResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlackDumpResponse.Unmarshal(m, b)
}
func (m *SlackDumpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlackDumpResponse.Marshal(b, m, deterministic)
}
func (m *SlackDumpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlackDumpResponse.Merge(m, src)
}
func (m *SlackDumpResponse) XXX_Size() int {
	return xxx_messageInfo_SlackDumpResponse.Size(m)
}
func (m *SlackDumpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SlackDumpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SlackDumpResponse proto.InternalMessageInfo

func (m *SlackDumpResponse) GetCommonResponse() *CommonResponse {
	if m != nil {
		return m.CommonResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*CommonResponse)(nil), "CommonResponse")
	proto.RegisterType((*SlackDumpRequest)(nil), "SlackDumpRequest")
	proto.RegisterType((*SlackDumpResponse)(nil), "SlackDumpResponse")
}

func init() { proto.RegisterFile("slack-bot/proto/slackbot.proto", fileDescriptor_256925389507cd0d) }

var fileDescriptor_256925389507cd0d = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbb, 0x4e, 0xf3, 0x40,
	0x10, 0x85, 0xe5, 0xff, 0x0f, 0x97, 0x0c, 0xe0, 0x24, 0x53, 0x59, 0x14, 0x28, 0x8a, 0x40, 0xb8,
	0x00, 0x47, 0x0a, 0x05, 0x05, 0x12, 0x12, 0xf7, 0x06, 0x51, 0x6c, 0x44, 0x6d, 0xf9, 0x32, 0x58,
	0x16, 0xd9, 0x1d, 0xb3, 0xbb, 0x86, 0x37, 0xe3, 0xf9, 0x50, 0xd6, 0x36, 0x02, 0xd3, 0xcd, 0x39,
	0xfe, 0x74, 0xe6, 0x78, 0x16, 0x0e, 0xcc, 0x2a, 0xc9, 0x5e, 0x4f, 0x53, 0xb6, 0xf3, 0x4a, 0xb3,
	0xe5, 0xb9, 0xd3, 0x29, 0xdb, 0xc8, 0xc9, 0xd9, 0x25, 0xf8, 0x37, 0x2c, 0x25, 0x2b, 0x41, 0xa6,
	0x62, 0x65, 0x08, 0x11, 0x06, 0x19, 0xe7, 0x14, 0x78, 0x53, 0x2f, 0xdc, 0x10, 0x6e, 0xc6, 0x00,
	0xb6, 0x24, 0x19, 0x93, 0x14, 0x14, 0xfc, 0x9b, 0x7a, 0xe1, 0x50, 0x74, 0x72, 0xf6, 0xe9, 0xc1,
	0x78, 0xb9, 0x8e, 0xbc, 0xad, 0x65, 0x25, 0xe8, 0xad, 0x26, 0x63, 0xf1, 0x04, 0xd0, 0x0d, 0x25,
	0xab, 0xf8, 0x45, 0xb3, 0x8c, 0x6b, 0x43, 0xda, 0x05, 0x0e, 0xc5, 0xb8, 0xfb, 0x72, 0xaf, 0x59,
	0x3e, 0x1b, 0xd2, 0x78, 0x08, 0x7e, 0xa2, 0xcc, 0x07, 0xe9, 0x86, 0x4d, 0xca, 0x76, 0xc7, 0x6e,
	0xe3, 0xae, 0xb9, 0xab, 0x12, 0x8f, 0xc0, 0x97, 0xac, 0x0a, 0xce, 0xd3, 0x98, 0x54, 0x92, 0xae,
	0x28, 0xf8, 0x3f, 0xf5, 0xc2, 0x6d, 0xb1, 0xd7, 0xba, 0x77, 0xce, 0xc4, 0x63, 0x18, 0x55, 0x6c,
	0x6c, 0xa1, 0xc9, 0x74, 0xdc, 0xc0, 0x71, 0x7e, 0x67, 0x37, 0xe0, 0xec, 0x11, 0x26, 0x3f, 0x7a,
	0xb7, 0xff, 0x7e, 0xde, 0xbf, 0x86, 0x2b, 0xbd, 0xb3, 0x18, 0x45, 0xbf, 0x6d, 0xd1, 0xc3, 0x16,
	0x4f, 0x30, 0x72, 0x69, 0xd7, 0x6c, 0x97, 0xa4, 0xdf, 0xcb, 0x8c, 0xf0, 0x02, 0xf0, 0x7b, 0x41,
	0xa9, 0x8a, 0x07, 0xcd, 0xb5, 0xca, 0x71, 0x12, 0xf5, 0xaf, 0xb5, 0x8f, 0xd1, 0x9f, 0x22, 0xe9,
	0xa6, 0x7b, 0x9d, 0xb3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x55, 0x75, 0x20, 0xbf, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SlackBotServiceClient is the client API for SlackBotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlackBotServiceClient interface {
	SlackDumpingGround(ctx context.Context, in *SlackDumpRequest, opts ...grpc.CallOption) (*SlackDumpResponse, error)
}

type slackBotServiceClient struct {
	cc *grpc.ClientConn
}

func NewSlackBotServiceClient(cc *grpc.ClientConn) SlackBotServiceClient {
	return &slackBotServiceClient{cc}
}

func (c *slackBotServiceClient) SlackDumpingGround(ctx context.Context, in *SlackDumpRequest, opts ...grpc.CallOption) (*SlackDumpResponse, error) {
	out := new(SlackDumpResponse)
	err := c.cc.Invoke(ctx, "/SlackBotService/SlackDumpingGround", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackBotServiceServer is the server API for SlackBotService service.
type SlackBotServiceServer interface {
	SlackDumpingGround(context.Context, *SlackDumpRequest) (*SlackDumpResponse, error)
}

func RegisterSlackBotServiceServer(s *grpc.Server, srv SlackBotServiceServer) {
	s.RegisterService(&_SlackBotService_serviceDesc, srv)
}

func _SlackBotService_SlackDumpingGround_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlackDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackBotServiceServer).SlackDumpingGround(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SlackBotService/SlackDumpingGround",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackBotServiceServer).SlackDumpingGround(ctx, req.(*SlackDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SlackBotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SlackBotService",
	HandlerType: (*SlackBotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SlackDumpingGround",
			Handler:    _SlackBotService_SlackDumpingGround_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slack-bot/proto/slackbot.proto",
}
